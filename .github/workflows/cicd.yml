name: CICD
on: [push]

env:
  IMAGE: reports_service
  SERVICE: reports


jobs:
  run_tests:
    runs-on: ubuntu-20.04
    env:
      DB_URL: postgresql://user:pass@127.0.0.1:5432/db
      S3_ENDPOINT_URL: http://127.0.0.1:9000
      S3_ACCESS_KEY_ID: access_key_id
      S3_SECRET_ACCESS_KEY: secret_access_key
      S3_REGION: ru-central1
      S3_BUCKET: mybucket
      SQS_ENDPOINT_URL: http://localhost:9324
      SQS_ACCESS_KEY_ID: access_key_id
      SQS_SECRET_ACCESS_KEY: secret_access_key
      SQS_REGION: ru-central1
      SQS_QUEUE_PATH: queue/myqueue
      SQS_PARSE_TASK: parse_report
      PAYMENT_SHOP_ID: my_shop
      PAYMENT_SECRET_KEY: super_secret
      PAYMENT_JWT_KEY: secret_jwt_key
      PAYMENT_RETURN_URL: my_site
      PRODUCT_CODE: some_code

    services:

      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 1s
          --health-retries 10

      s3:
        image: minio/minio:edge-cicd
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: access_key_id
          MINIO_SECRET_KEY: secret_access_key

      sqs:
        image: vsouza/sqs-local:latest
        ports:
          - "9324:9324"

    steps:
      - uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - run: pip install poetry
      - run: make install
      - run: make lint
      - run: make test
      - run: make cov


# -------------- TEST ENV --------------------- #

  test_build:
    needs: run_tests
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/develop'

    steps:

      - name: Get SHORT_SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v1
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_TEST_CR_PUSHER_AUTH_KEY }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            cr.yandex/${{ secrets.YC_TEST_CR_ID }}/${{ env.IMAGE }}:${{ env.SHORT_SHA }}
            cr.yandex/${{ secrets.YC_TEST_CR_ID }}/${{ env.IMAGE }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}



  test_deploy:
    needs: test_build
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/develop'
    env:
          SSH_USER_HOST: ${{ secrets.YC_TEST_VM_USER_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.YC_TEST_VM_SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.YC_TEST_VM_SSH_KNOWN_HOSTS }}

    steps:

      - name: Get SHORT_SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Pull image
        run: ssh $SSH_USER_HOST ./pull_image.sh $IMAGE $SHORT_SHA

      - name: Update service
        run: ssh $SSH_USER_HOST ./update_service.sh $SERVICE $IMAGE $SHORT_SHA


# -------------- PROD ENV --------------------- #

  prod_build:
    needs: run_tests
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'

    steps:

      - name: Get SHORT_SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Login to Yandex Container Registry
        uses: docker/login-action@v1
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.PROD_CR_PUSHER_KEY }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            cr.yandex/${{ secrets.PROD_CR_ID }}/${{ env.IMAGE }}:${{ env.SHORT_SHA }}
            cr.yandex/${{ secrets.PROD_CR_ID }}/${{ env.IMAGE }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}



  prod_deploy:
    needs: prod_build
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    env:
          SSH_USER_HOST: ${{ secrets.PROD_VM_USER_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.PROD_VM_SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.PROD_VM_SSH_KNOWN_HOSTS }}

    steps:

      - name: Get SHORT_SHA
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Pull image
        run: ssh $SSH_USER_HOST ./pull_image.sh $IMAGE $SHORT_SHA

      - name: Update service
        run: ssh $SSH_USER_HOST ./create_or_update_service.sh $SERVICE $IMAGE $SHORT_SHA
